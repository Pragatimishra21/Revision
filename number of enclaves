class Solution {
public:
    void dfs(int r , int c, vector<vector<int>>& grid,vector<vector<int>>& vis)
    {
        vis[r][c] = 1;
        int n = grid.size();
        int m = grid[0].size();
        int delrow[] = {-1,0,1,0};
        int delcol[] = {0,1,0,-1};
        for(int i=0 ; i<4 ; i++)
        {
            int nrow = r+delrow[i];
            int ncol = c+delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol] == 1 && vis[nrow][ncol]==0)
            dfs(nrow, ncol , grid , vis);
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
     int n = grid.size();
     int m = grid[0].size();
     vector<vector<int>> vis(n,vector<int>(m,0));
     for(int i=0 ; i<n ; i++)
     {
       if(grid[i][0] == 1)
       dfs(i,0,grid,vis);

       if(grid[i][m-1] == 1)
       dfs(i,m-1,grid,vis);
     }   

      for(int j=0 ; j<m ; j++)
     {
       if(grid[0][j] == 1)
       dfs(0,j,grid,vis);

       if(grid[n-1][j] == 1)
       dfs(n-1 ,j,grid,vis);
     } 

     int count = 0;
     for(int i=0 ; i<n ; i++)
     {
         for(int j=0 ; j<m ; j++)
         {
           if(grid[i][j] == 1 && vis[i][j] == 0)
           count++;
         }
     }
     return count;
    }
};

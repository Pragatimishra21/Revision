class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
       if(preorder.size() != inorder.size()) return NULL;

       map<int,int>mp;
       for(int i=0 ; i<inorder.size() ; i++)
       {
           mp[inorder[i]] = i;
       } 
       return build(inorder,0,inorder.size()-1,preorder,0,preorder.size()-1,mp);
    }

    TreeNode* build(vector<int>& inorder, int is, int ie, vector<int>& preorder , int ps, int pe , map<int,int> &mp)
    {
        if(is>ie || ps>pe) return NULL;

        TreeNode *root = new TreeNode(preorder[ps]);
        int inroot = mp[preorder[ps]];

        int left = inroot - is;

        root->left = build(inorder,is,is+inroot-1,preorder,ps+1,ps+left,mp);
        root->right = build(inorder,inroot+1,ie,preorder,ps+left+1,pe,mp);
        return root;
    }    
};

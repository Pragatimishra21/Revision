int arr={1,2,3,4}
target = 4

f(ind,target){
if(target==0) return true;
if(ind==0) return (arr[0]==target);

int notTake = f(ind-1,target);
int take = false;
if(arr[ind]<=target)
take = f(ind-1,target-arr[ind]);

return take||notTake;
}


bool subsetSumToK(int n, int k, vector<int> &arr){
    vector<vector<bool>> dp(n,vector<bool>(k+1,false));
    
    for(int i=0; i<n; i++){
        dp[i][0] = true;
    }
    
    if(arr[0]<=k)
        dp[0][arr[0]] = true;
    
    for(int ind = 1; ind<n; ind++){
        for(int target= 1; target<=k; target++){
            
            bool notTaken = dp[ind-1][target];
    
            bool taken = false;
                if(arr[ind]<=target)
                    taken = dp[ind-1][target-arr[ind]];
        
            dp[ind][target]= notTaken||taken;
        }
    }
    
    return dp[n-1][k];
}

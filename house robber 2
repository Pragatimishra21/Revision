lass Solution {
public:
   int helper(vector<int>& nums , int n)
   {
     if(n==0) return nums[0];
     if(n<0) return 0;
     int pick = nums[n] + helper(nums , n-2);

     int notpick = 0 + helper(nums , n-1);

     return max(pick , notpick);
   }

    int rob(vector<int>& nums) {
      int n = nums.size();
      vector<int> temp1 , temp2 ;
      for(int i=0 ; i<n ; i++)
      {
          if(i!=0) temp1.push_back(nums[i]);
          if(i!= n-1) temp2.push_back(nums[i]);
      }  

      int ans1 = helper(temp1 , n-2);
      int ans2 = helper(temp2 , n-2);

      return max(ans1 , ans2);
    }
};

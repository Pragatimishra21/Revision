class Solution {
public:
    void bfs(int r , int c, vector<vector<char>>& grid ,vector<vector<int>> &vis)
    {
        vis[r][c] = 1;
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int,int>> q;
        q.push({r,c});
        while(!q.empty())
        {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();

            for(int delrow = -1 ; delrow<=1 ; delrow++)
            {
                for(int delcol = -1 ; delcol<=1 ; delcol++)
                {
                     if(delrow==-1&&delcol==0||delrow==0&&delcol==1||delrow==1&&delcol==0||delrow==0&&delcol==-1){
                    int nrow = row+delrow;
                    int ncol = col+delcol;
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1' && vis[nrow][ncol]==0)
                    {
                        vis[nrow][ncol] = 1;
                        q.push({nrow , ncol});
                    }
                }
                }
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
      int n = grid.size();
      int m = grid[0].size();
      vector<vector<int>> vis(n,vector<int>(m,0));
      int count = 0;
      for(int i=0 ; i<n ; i++)
      {
          for(int j=0 ; j<m ; j++)
          {
              if(!vis[i][j] && grid[i][j] == '1')
              {
                  count++;
                  bfs(i,j,grid,vis);
              }
          }
      }  
      return count;
    }
};

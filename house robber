class Solution {
public:
    int helper(vector<int>& nums , int n)
    {
        if(n==0) return nums[0];
        if(n<0) return 0;

        int pick = nums[n] + helper(nums , n-2);
        int notpick = 0+ helper(nums , n-1);
        return max(pick , notpick);
    }

    int rob(vector<int>& nums) {
        int n = nums.size();
       return helper(nums , n-1); 
    }
};


class Solution {
public:
    
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, -1);
        dp[0] = nums[0];
        for(int i=1 ; i<n ; i++)
        {
           int pick = nums[i];
           if(i>1)
           pick += dp[i-2];

          int notpick = 0 + dp[i-1];
          dp[i] = max(pick , notpick);
        }
        return dp[n-1];
    }
};

class Solution {
public:
   void dfs(int r , int c , vector<vector<char>>& board ,  vector<vector<int>> &vis)
   {
       vis[r][c] = 1;
       int n = board.size();
       int m = board[0].size();   
       int delrow[] = {-1,0,1,0};
       int delcol[] = {0,1,0,-1};
       for(int i=0 ; i<4 ; i++)
       {
           int nrow = r+delrow[i];
           int ncol = c+delcol[i];
           if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && board[nrow][ncol]=='O' && vis[nrow][ncol]==0)
           dfs(nrow,ncol,board,vis);
       }
   }
    void solve(vector<vector<char>>& board) {
     int n = board.size();
     int m = board[0].size();
     vector<vector<int>> vis(n,vector<int>(m,0));
     for(int j=0 ; j<m ; j++)
     {
         if(board[0][j]== 'O')
         dfs(0,j,board,vis);

         if(board[n-1][j] == 'O')
         dfs(n-1,j,board,vis);
     }   
      for(int i=0 ; i<n ; i++)
     {
         if(board[i][0]== 'O')
         dfs(i,0,board,vis);

         if(board[i][m-1] == 'O')
         dfs(i,m-1,board,vis);
     } 
     
      for(int i=0 ; i<n ; i++)
      {
          for(int j=0 ; j<m ; j++)
          {
              if(board[i][j]=='O' && vis[i][j] == 0)
              {
                  board[i][j] = 'X';
              }
          }
      }
    }
};
